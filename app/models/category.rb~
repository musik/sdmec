# -*- encoding : utf-8 -*-
class Category < ActiveRecord::Base
  attr_accessible :cid, :is_parent, :name, :parent_cid, :sort_order, :status,:children_fetched,:parent_id
  default_scope order("sort_order asc")
  acts_as_nested_set
  resourcify

  def items
    leaf? ? Item.where(:cid=>cid) : Item.where(:cid=>self_and_descendants.pluck(:cid))
  end
  def to_param
    id
  end

  def parent_name
    parent.present? ? parent.name : nil
  end
  def import_children
    r = Category.import_from_parent cid
    unless r == false
      update_attribute :children_fetched,true
      sleep 90
    end
  end
  def update_items city=nil
    Item.import_by_cid cid,city
  end
  class << self
    def rebuild_parent_id
      pluck(:id).each do |id|
        c = find(id)
         if c.parent_cid > 0
          c.parent_id = find_by_cid(c.parent_cid).id
          c.save
         end
      end
    end
    def update_all_items
      Category.leaves.pluck(:id).each do |id|
        find(id).delay.update_items
      end
    end
    def find *args
      if args.size == 1
        return find_by_name(args[0]) if args[0].to_i.zero?
      end
      super
    end
    def cached_roots
      Rails.cache.fetch "category_roots" do
        roots
      end
    end
    def import_all
      delete_all
      import_from_parent(0)
      #while c = where(:is_parent=>true,:children_fetched=>nil).first and c.present?
         #c.import_children
         #sleep 1
      #end
    end
    def import_from_parent(pid = 0)
      logger.debug "import_from_parent:#{pid}"
      api =  TaobaoFu::Api.new
      rs = api.itemcats_get(pid)
      return false if rs.nil?
      rs.each do |r|
        c = where(:cid=>r["cid"]).first_or_create(r)
        logger.debug "c:#{c.is_parent?}#{c.inspect}"
        self.delay.import_from_parent(c.cid) if c.is_parent? #and !Rails.env.test?
      end
    end
  end
end
